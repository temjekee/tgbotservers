import logging
import asyncio
import uuid
import shutil
import aiofiles
from pathlib import Path
from telegram.error import BadRequest
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters, CallbackQueryHandler
from webflow import get_templates, get_random_template
from convertpdf import generate_pdf
from config import TOKEN
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
executor = ThreadPoolExecutor(max_workers=5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ PDF –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
pdf_data = {}  # message_id -> template_url
user_pdf_history = {}  # user_id -> list of message_ids

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORY_BUTTONS = [
    ['Technology Websites', 'Design Websites'],
    ['Business Websites', 'Blog Websites'],
    ['Marketing Websites', 'Photography & Video Websites'],
    ['Entertainment Websites', 'Food & drink Websites'],
    ['Travel Websites', 'Education Websites'],
    ['Sports Websites', 'Medical Websites'],
    ['Beauty & Wellness Websites', 'Fashion Websites'],
]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è category_mapping
category_mapping = {
    'Technology Websites': 'technology-websites',
    'Design Websites': 'design-websites',
    'Business Websites': 'business-websites',
    'Blog Websites': 'blog-websites',
    'Marketing Websites': 'marketing-websites',
    'Photography & Video Websites': 'photography-and-video-websites',
    'Entertainment Websites': 'entertainment-websites',
    'Food & drink Websites': 'food-and-drink-websites',
    'Travel Websites': 'travel-websites',
    'Education Websites': 'education-websites',
    'Sports Websites': 'sports-websites',
    'Medical Websites': 'medical-websites',
    'Beauty & Wellness Websites': 'beauty-and-wellness-websites',
    'Fashion Websites': 'fashion-websites',
}

# –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ PDF –∏ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CONTACT_BUTTON = InlineKeyboardButton("–ú–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π!", callback_data='contact')
NEW_PDF_BUTTON = InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç!", callback_data='new_pdf')
CHOOSE_CATEGORY_BUTTON = InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='choose_category')

TEMP_DIRS = {}  # {temp_dir: creation_time}

async def cleanup_temp_dirs(context: CallbackContext) -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    now = datetime.now()
    for temp_dir, creation_time in list(TEMP_DIRS.items()):
        if now - creation_time > timedelta(minutes=5):
            try:
                shutil.rmtree(temp_dir)
                logging.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {temp_dir} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
                TEMP_DIRS.pop(temp_dir)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {temp_dir}: {e}")

async def start(update: Update, context: CallbackContext) -> None:
    logging.info("Received /start command")
    reply_markup = ReplyKeyboardMarkup(CATEGORY_BUTTONS, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ InChain Digital. –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —è —Ç–µ–±—è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —Ç–≤–æ–π —Å–∞–π—Ç –º–æ–≥ –±—ã –≤—ã–≥–ª—è–¥–µ—Ç—å!',
        reply_markup=reply_markup
    )

async def handle_category_selection(update: Update, context: CallbackContext) -> None:
    category = update.message.text
    if category in category_mapping:
        category_key = category_mapping[category]
        context.user_data['current_category'] = category_key
        await generate_and_send_pdf(update, context, category, category_key)
    else:
        await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.')

async def safe_delete_message(bot, chat_id, message_id):
    """–ü—Ä–æ–±—É–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: {message_id}: {e}")

async def safe_delete_temp_dir(temp_dir: Path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫."""
    try:
        shutil.rmtree(temp_dir)
        logging.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞: {temp_dir}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {temp_dir}: {e}")

async def update_status_message(bot, chat_id, message_id, status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º."""
    try:
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=status)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def generate_pdf_and_save(template, temp_dir):
    """–§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF."""
    try:
        pdf_path = await generate_pdf(template, temp_dir)
        return pdf_path
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return None

async def send_pdf(update: Update, context: CallbackContext, pdf_path: str, template: str) -> None:
    """–§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF."""
    if pdf_path:
        pdf_filename = Path(pdf_path).name  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        async with aiofiles.open(pdf_path, 'rb') as pdf_file:
            pdf_content = await pdf_file.read()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        reply_markup = InlineKeyboardMarkup([[CONTACT_BUTTON], [NEW_PDF_BUTTON], [CHOOSE_CATEGORY_BUTTON]])

        try:
            if update.message:
                sent_message = await update.message.reply_document(
                    pdf_content, filename=pdf_filename
                )
            else:
                sent_message = await context.bot.send_document(
                    chat_id=update.callback_query.message.chat_id,
                    document=pdf_content,
                    filename=pdf_filename
                )

            pdf_data[sent_message.message_id] = template
            user_id = update.effective_user.id
            if user_id not in user_pdf_history:
                user_pdf_history[user_id] = []
            user_pdf_history[user_id].append(sent_message.message_id)

            logging.info(f"PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {pdf_path}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–°–∞–π—Ç –±—ã–ª —Å–¥–µ–ª–∞–Ω. –ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –±—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def generate_and_send_pdf(update: Update, context: CallbackContext, category: str, category_key: str) -> None:
    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        templates = await get_templates(category_key)
        logging.info(f"Templates found: {templates}")

        if templates:
            template = get_random_template(templates)
            logging.info(f"Selected template: {template}")
            if template:
                waiting_message = None
                if update.message:
                    waiting_message = await update.message.reply_text('–°–æ–∑–¥–∞–Ω–∏–µ PDF... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')
                elif update.callback_query:
                    waiting_message = await context.bot.send_message(
                        chat_id=update.callback_query.message.chat_id,
                        text='–°–æ–∑–¥–∞–Ω–∏–µ PDF... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
                    )

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                temp_dir = Path(f"temp_{uuid.uuid4().hex}")
                temp_dir.mkdir(parents=True, exist_ok=True)
                TEMP_DIRS[temp_dir] = datetime.now()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω –≤ user_data –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è PDF
                context.user_data['last_template'] = template

                try:
                    # –°—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    status_updates = [
                        "üîç –û–±—Ä–∞–±–æ—Ç–∫–∞...",
                        "üìú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...",
                        "üíæ –°–æ–∑–¥–∞–Ω–∏–µ...",
                        "üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞..."
                    ]

                    for status in status_updates:
                        await update_status_message(context.bot, waiting_message.chat_id, waiting_message.message_id, status)
                        await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –≤ —Ñ–æ–Ω–µ
                    pdf_path = await generate_pdf_and_save(template, temp_dir)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
                    await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    raise

                if pdf_path:
                    await send_pdf(update, context, pdf_path, template)
                    await safe_delete_message(context.bot, waiting_message.chat_id, waiting_message.message_id)
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    asyncio.create_task(safe_delete_temp_dir(temp_dir))
                else:
                    await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    await safe_delete_message(context.bot, waiting_message.chat_id, waiting_message.message_id)
                    asyncio.create_task(safe_delete_temp_dir(temp_dir))
            else:
                await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        else:
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ
        await query.answer()

        if query.data == 'contact':
            template_url = context.user_data.get('last_template')

            if template_url:
                await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
                context.user_data['waiting_for_email'] = True
                context.user_data['template_url'] = template_url
                logging.info(f"Waiting for email input from user. Associated template: {template_url}")
            else:
                await query.message.reply_text("–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        elif query.data == 'new_pdf':
            category_key = context.user_data.get('current_category')
            category_name = next((k for k, v in category_mapping.items() if v == category_key), None)

            if category_key and category_name:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(generate_and_send_pdf(update, context, category_name, category_key))
            else:
                await query.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        elif query.data == 'choose_category':
            reply_markup = ReplyKeyboardMarkup(CATEGORY_BUTTONS, one_time_keyboard=True, resize_keyboard=True)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ —Å–∞–π—Ç–∞:", reply_markup=reply_markup)

    except BadRequest as e:
        logging.error(f"Error in handling button click: {e}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_email_input(update: Update, context: CallbackContext) -> None:
    logging.info(f"Received message: {update.message.text}")

    if context.user_data.get('waiting_for_email'):
        email = update.message.text
        logging.info(f"Email received: {email}")
        context.user_data['waiting_for_email'] = False

        template_url = context.user_data.get('template_url')

        if template_url:
            group_chat_id = -1002201196372  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            message_text = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç:\nEmail: {email}\n–®–∞–±–ª–æ–Ω: {template_url}"

            try:
                await context.bot.send_message(chat_id=group_chat_id, text=message_text)
                logging.info("Email and template URL sent to group chat.")
                await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
            except Exception as e:
                logging.error(f"Error sending message to group: {e}")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        logging.info("Message received but not in 'waiting_for_email' state, ignoring.")

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^(Technology|Design|Business|Blog|Marketing|Photography & Video|Entertainment|Food & drink|Travel|Education|Sports|Medical|Beauty & Wellness|Fashion) Websites$'), handle_category_selection))
    application.add_handler(CallbackQueryHandler(handle_button_click))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'.*@.*\..*'), handle_email_input))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    application.job_queue.run_repeating(cleanup_temp_dirs, interval=60)

    application.run_polling()

if __name__ == '__main__':
    main()
